package Common;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.logging.FileHandler;
import java.util.logging.Logger;
import java.util.logging.SimpleFormatter;

public class Util {

    public static FileHandler startLoggingToFile(Logger logger, String fileName) {
        try {
            FileHandler fh = new FileHandler(fileName);
            SimpleFormatter simpleFormatter = new SimpleFormatter();
            fh.setFormatter(simpleFormatter);
            logger.addHandler(fh);
            return fh;
        }
        catch (IOException e) {
            throw new RuntimeException(e);
        }
    }

    public static void stopLoggingToFile(Logger logger, FileHandler fileHandler) {
        logger.removeHandler(fileHandler);
    }

    /**
     * Convert milliseconds to seconds
     * @param millis the value to convert
     * @return the converted value
     */
    public static long milliSecondsToSeconds(long millis) {
        return millis / 1000;
    }

    /**
     * Return the elapsed time between a start value and an end value.
     * Time should be given in milliseconds as generated by System.currentTimeMillis.
     * @param start the starting time
     * @param end the finishing time
     * @return the difference between the start and end time.
     */
    public static long elapsedTimeMillis(long start, long end) {
        return end - start;
    }

    public static String currentDateTime() {
        return new SimpleDateFormat("HH:mm dd/MM").format(new Date());
    }

    public static String currentDateTime(String format) {
        return new SimpleDateFormat(format).format(new Date());
    }

    public static double averageDoubles(List<Double> list) {
        return list.stream()
                .mapToDouble(num -> num)
                .average()
                .orElse(Double.NaN);
    }

    public static double averageInts(List<Integer> list) {
        return list.stream()
                .mapToInt(num -> num)
                .average()
                .orElse(Double.NaN);
    }

    public static double averageLongs(List<Long> list) {
        return list.stream()
                .mapToLong(num -> num)
                .average()
                .orElse(Double.NaN);
    }
}
